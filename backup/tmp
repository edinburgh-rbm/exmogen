
(* (\* Populate chains with elementary relations for group element [g] *\) *)
(* let fill_chains (g : elt) = *)
(*   for i = 0 to Array.length relators - 1 do *)
(*     chain_table := (g, relators.(i), g) :: !chain_table *)
(*   done *)

(* let add_link (elt, gen, image) = *)
(*   match gen with *)
(*   | Elt gen -> *)
(*     if table_mem link_table elt gen then *)
(*       failwith "collision in link table" *)
(*     else *)
(*       table_set link_table elt gen image *)
(*   | Inv gen -> *)
(*     if table_mem link_table elt gen then *)
(*       failwith "collision in link table" *)
(*     else *)
(*       table_set link_table image gen elt *)

(* let propagate () = *)
(*   let eltr   = ref 0 in *)
(*   let imager = ref 0 in *)
(*   let change = ref false in *)
(*   let cont   = ref false in  (\* record whether we reached a fixed point *\) *)
(*   let new_chains = *)
(*     List.fold_left (fun chains (elt, chain, image) -> *)
(*       let chainr = ref chain in (\* cannot hoist it: there ex. no empty Dllist *\) *)
(*       eltr   := elt; *)
(*       imager := image; *)
(*       cont   := true; *)
(*       while !cont do *)
(*         cont := false; *)
(*         (\* Try to match head of chain *\) *)
(*         let result =  *)
(*           match Dllist.get !chainr with *)
(*           | Elt first -> table_lookup_forward link_table !eltr first *)
(*           | Inv first -> table_lookup_backward link_table !eltr first *)
(*         in *)
(*         begin match result with *)
(*         | None -> *)
(*           (\* Try to match tail of chain *\) *)
(*           let result =  *)
(*             match Dllist.get (Dllist.prev !chainr) with *)
(*             | Elt last -> table_lookup_backward link_table !imager last *)
(*             | Inv last -> table_lookup_forward link_table !imager last *)
(*           in *)
(*           begin match result with *)
(*           | None -> () *)
(*           | Some image' -> *)
(*             (imager := image';  *)
(*              Dllist.remove (Dllist.prev !chainr); *)
(*              cont := true) *)
(*           end *)
(*         | Some elt' -> *)
(*           (eltr := elt'; *)
(*            chainr := Dllist.next !chainr; *)
(*            Dllist.remove !chainr; *)
(*            cont := true) *)
(*         end; *)
(*         change := !change || !cont; *)
(*         cont   := (Dllist.next !chainr <> Dllist.prev !chainr) && !cont *)
(*       done; *)
(*       if Dllist.next !chainr == Dllist.prev !chainr then *)
(*         (add_link (!eltr, Dllist.get !chainr, !imager); *)
(*          chains) *)
(*       else *)
(*         (!eltr, !chainr, !imager) :: chains *)
(*     ) [] !chain_table *)
(*   in *)
(*   chain_table := new_chains; *)
(*   !change *)
